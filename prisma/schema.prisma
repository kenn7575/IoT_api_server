generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Room {
  id           Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name         String        @db.VarChar(100)
  description  String?       @db.VarChar(255)
  alerts       Alert[]
  devices      Device[]
  measurements Measurement[]
}

model Setting {
  id                  Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                String   @db.VarChar(100)
  timeIntervalSeconds Int
  startTime           DateTime @db.Time(0)
  endTime             DateTime @db.Time(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  devices             Device[]
}

model Device {
  id           Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  machine_id   String        @unique(map: "machine_id_UNIQUE") @db.VarChar(100)
  name         String        @db.VarChar(100)
  description  String?       @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  roomId       Int?
  settingId    Int?
  active       Boolean       @default(true)
  alerts       Alert[]
  apiKeys      ApiKey[]
  room         Room?         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  setting      Setting?      @relation(fields: [settingId], references: [id])
  measurements Measurement[]

  @@index([roomId], map: "Device_roomId_fkey")
  @@index([settingId], map: "Device_settingId_fkey")
}

model ApiKey {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name      String   @db.VarChar(100)
  key       String   @db.VarChar(100)
  deviceId  Int
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId], map: "ApiKey_deviceId_fkey")
}

model Measurement {
  id              Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  createdAt       DateTime        @default(now())
  measurement     Int
  valueType       String?         @db.VarChar(100)
  measurementType MeasurementType
  deviceId        Int
  roomId          Int
  device          Device          @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  room            Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([deviceId], map: "Measurement_deviceId_fkey")
  @@index([roomId], map: "Measurement_roomId_fkey")
}

model Alert {
  id          Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  roomId      Int
  deviceId    Int
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([deviceId], map: "Alert_deviceId_fkey")
  @@index([roomId], map: "Alert_roomId_fkey")
}

enum MeasurementType {
  Temperature
  Humidity
  Noise
  Pressure
  Light
  Other
}
