generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model alert {
  id          Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  roomId      Int
  deviceId    Int
  device      device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, map: "Alert_deviceId_fkey")
  room        room     @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Alert_roomId_fkey")

  @@index([deviceId], map: "Alert_deviceId_fkey")
  @@index([roomId], map: "Alert_roomId_fkey")
}

model apikey {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name      String   @db.VarChar(100)
  key       String   @db.VarChar(100)
  deviceId  Int
  createdAt DateTime @default(now())
  device    device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, map: "ApiKey_deviceId_fkey")

  @@index([deviceId], map: "ApiKey_deviceId_fkey")
}

model device {
  id          Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name        String        @db.VarChar(100)
  description String?       @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  roomId      Int?
  settingId   Int?
  active      Boolean       @default(true)
  machine_id  String        @unique(map: "machine_id_UNIQUE") @db.VarChar(100)
  alert       alert[]
  apikey      apikey[]
  room        room?         @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Device_roomId_fkey")
  setting     setting?      @relation(fields: [settingId], references: [id], map: "Device_settingId_fkey")
  measurement measurement[]

  @@index([roomId], map: "Device_roomId_fkey")
  @@index([settingId], map: "Device_settingId_fkey")
}

model measurement {
  id              Int                         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  createdAt       DateTime                    @default(now())
  measurement     Int
  valueType       String?                     @db.VarChar(100)
  measurementType measurement_measurementType
  deviceId        Int
  roomId          Int
  device          device                      @relation(fields: [deviceId], references: [id], onDelete: Cascade, map: "Measurement_deviceId_fkey")
  room            room                        @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Measurement_roomId_fkey")

  @@index([deviceId], map: "Measurement_deviceId_fkey")
  @@index([roomId], map: "Measurement_roomId_fkey")
}

model room {
  id          Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name        String        @db.VarChar(100)
  description String?       @db.VarChar(255)
  alert       alert[]
  device      device[]
  measurement measurement[]
}

model sensorsettings {
  id                 Int @id @unique(map: "Id_UNIQUE")
  temperaturInterval Int
  humidityInterval   Int
  noiseInterval      Int
}

model setting {
  id                  Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                String   @db.VarChar(100)
  timeIntervalSeconds Int
  startTime           DateTime @db.Time(0)
  endTime             DateTime @db.Time(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  device              device[]
}

enum measurement_measurementType {
  Temperature
  Humidity
  Noise
  Pressure
  Light
  Other
}
