generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model alert {
  id          Int      @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  roomId      Int      @db.UnsignedInt
  deviceId    Int      @db.UnsignedInt
  device      device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, map: "Alert_deviceId_fkey")
  room        room     @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Alert_roomId_fkey")

  @@index([deviceId], map: "Alert_deviceId_fkey")
  @@index([roomId], map: "Alert_roomId_fkey")
}

model apikey {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name      String   @db.VarChar(100)
  key       String   @db.VarChar(100)
  deviceId  Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  device    device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, map: "ApiKey_deviceId_fkey")

  @@index([deviceId], map: "ApiKey_deviceId_fkey")
}

model device {
  id             Int             @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name           String          @db.VarChar(100)
  description    String?         @db.VarChar(255)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime         @default(now()) 
  roomId         Int?            @db.UnsignedInt
  settingId      Int           @db.UnsignedInt @unique
  active         Boolean         @default(true)
  machine_id     String          @unique @db.VarChar(100)
  alert          alert[]
  apikey         apikey[]
  room           room?           @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Device_roomId_fkey")
  setting        setting        @relation(fields: [settingId], references: [id])
  measurement    measurement[]
  sensorSettings sensorSettings?

  @@index([roomId], map: "Device_roomId_fkey")
}

model measurement {
  id          Int                     @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  createdAt   DateTime                @default(now())
  measurement Int
  valueType   String?                 @db.VarChar(100)
  deviceId    Int                     @db.UnsignedInt
  roomId      Int                     @db.UnsignedInt
  sensorType  measurement_sensorType?
  device      device                  @relation(fields: [deviceId], references: [id], onDelete: Cascade, map: "Measurement_deviceId_fkey")
  room        room                    @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Measurement_roomId_fkey")

  @@index([deviceId], map: "Measurement_deviceId_fkey")
  @@index([roomId], map: "Measurement_roomId_fkey")
}

model room {
  id          Int           @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name        String        @db.VarChar(100)
  description String?       @db.VarChar(255)
  alert       alert[]
  device      device[]
  measurement measurement[]
}

model sensorSettings {
  id                   Int                           @id @unique(map: "Id_UNIQUE") @db.UnsignedInt
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @default(now())
  sensorType           sensor_settings_sensor_type
  maxValue             Float                         @db.Float
  minValue             Float                         @db.Float
  timeinterval_seconds Int                           @default(300) @db.UnsignedInt
  active_period        sensor_settings_active_period @default(Open)
  deviceId             Int                           @unique(map: "sensorsettings_deviceId_unique") @db.UnsignedInt
  device               device                        @relation(fields: [deviceId], references: [id], onUpdate: Restrict, map: "sensorsettings_ibfk_1")

  @@index([deviceId], map: "deviceId")
}

model setting {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name      String   @default("Default") @db.VarChar(100)
  startTime DateTime @default(dbgenerated("('08:00:00')")) @db.Time(0)
  endTime   DateTime @default(dbgenerated("('16:00:00')")) @db.Time(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  device device?
}

enum sensor_settings_sensor_type {
  Temperature
  Humidity
  Noise
  Pressure
  Light
  Other
}

enum measurement_sensorType {
  Temperature
  Humidity
  Noise
  Pressure
  Light
  Other
}

enum sensor_settings_active_period {
  Open
  Closed
}
